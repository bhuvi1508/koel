name: Deploy Koel App to AWS Elastic Beanstalk

on:
  push:
    branches:
      - master  # Adjust the branch name as needed

jobs:
  deploy:
    runs-on: ubuntu-latest  # GitHub Action runner environment (not specific to EC2)

    steps:
      # Step 1: Checkout the code from GitHub
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Amazon Linux 2023 environment for PHP and dependencies
      - name: Set up Amazon Linux 2023 environment for PHP and NVM
        run: |
          # Install dependencies for NVM, Node.js, and PHP
          sudo yum install -y gcc-c++ make curl git

          # Install NVM (Node Version Manager)
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
          
          # Add NVM to the current shell session
          source ~/.bashrc  # To make sure nvm is available in the current session

          # Install Node.js 20.x using NVM
          nvm install 20

          # Set Node.js 20 as the default version
          nvm use 20
          nvm alias default 20

          # Install PHP and other necessary dependencies for Koel
          sudo yum install -y php-cli php-zip php-mbstring php-curl php-xml php-mysqlnd unzip

      # Step 3: Install Composer (PHP package manager)
      - name: Install Composer
        run: |
          curl -sS https://getcomposer.org/installer | php
          sudo mv composer.phar /usr/local/bin/composer

      # Step 4: Install PHP dependencies
      - name: Install PHP dependencies
        run: composer install --no-interaction --prefer-dist

      # Step 5: Install NPM dependencies
      - name: Install NPM dependencies
        run: |
          npm install

      # Step 6: Build the frontend assets (if applicable)
      - name: Build Koel frontend assets
        run: |
          npm run build

      # Step 7: Create a deployment ZIP file
      - name: Create deployment package
        run: |
          zip -r deploy.zip * .env .ebextensions  # Include .env and .ebextensions if necessary

      # Step 8: Deploy to AWS Elastic Beanstalk
      - name: Deploy to AWS Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v22
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: koel-app-1  # Replace with your Elastic Beanstalk app name
          environment_name: koel-app-1-env  # Replace with your Elastic Beanstalk environment name
          version_label: ${{ github.sha }}  # Unique version identifier (Git commit hash)
          region: ap-south-1  # Replace with your AWS region
          deployment_package: deploy.zip  # Path to the deployment package

      # Step 9: Run Database Migrations on Elastic Beanstalk instance (using SSH)
      - name: Run Database Migrations
        uses: appleboy/ssh-action@v0.1.5  # Use a newer version with password support
        with:
          host: ${{ secrets.EB_HOST }}  # Replace with your Elastic Beanstalk instance's host or public IP
          username: ec2-user  # Amazon Linux default username
          password: ${{ secrets.EB_SSH_PRIVATE_KEY }}  # Use your SSH password for accessing the instance
          script: |
            cd /var/app/current  # Navigate to the deployment directory
            php artisan migrate --force  # Run the migration command (use --force in production to avoid prompts)
            php artisan db:seed --force
            php artisan key:generate 

